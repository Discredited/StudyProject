/**
 * 读取配置的参数
 * @param propertyName 参数名
 * @return 参数值 或 ""
 */
def getStringProperty(String propertyName) {
    return project.hasProperty(propertyName) ? project.getProperty(propertyName) : ""
}

/**
 * 将源码打包，否则接入方无法看到源码
 */
task androidSourcesJar(type: Jar) {
    // classifier = 'sources'
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

// 因为组件只在 afterEvaluate 阶段创建，所以必须使用 afterEvaluate() 生命周期方法配置您的发布。
afterEvaluate {
    publishing {
        publications {
            // 创建一个名为“release”的 Maven 发布
            release(MavenPublication) {
                from components.release
                // 将源码打包，否则接入方无法看到源码
                artifact androidSourcesJar

                // 定义分组、artifact以及版本
                groupId = getStringProperty("publishingGroupId")
                artifactId = getStringProperty("publishingArtifactId")
                version = getStringProperty("publishingVersion")
                //println("==>>  groupId:" + groupId + "  artifactId:" + artifactId + "  version:" + version)
            }
        }

        repositories {
            maven {
                credentials {
                    def localProj = new Properties()
                    localProj.load(project.rootProject.file('local.properties').newDataInputStream())
                    def name = localProj.getProperty("publishingRepoUsername")
                    def pass = localProj.getProperty("publishingRepoPassword")

                    username name
                    password pass
                    //println("==>>  username:" + name + "  password:" + pass)
                }
                url = "file://localhost/Users/june/.m2/repository"
            }
        }
    }
}