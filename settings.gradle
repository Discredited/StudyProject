include ':network'
include ':rvadapter'
include ':app'
include ':style'
include ':imageabout'

//include表示有多少个项目工程需要加入构建
//并为加入构建的项目创建与之对应的Project实例

//在添加各个生命周期结点的监听
gradle.addBuildListener(new BuildListener() {
    @Override
    void buildStarted(Gradle gradle) {
        //开始构建(执行setting.gradlew中的代码)
        println 'start build'
        println 'analyze what needs to be built(init begin)'
    }

    @Override
    void settingsEvaluated(Settings settings) {
        //评估完成(setting.gradle中代码执行完毕)
        println("evaluated complete (setting.gradle execution completed)")
    }

    @Override
    void projectsLoaded(Gradle gradle) {
        //项目结构加载完成(初始化结束)
        println("the project structure is loaded(init complete)")
        println(gradle.gradle.rootProject)
    }

    @Override
    void projectsEvaluated(Gradle gradle) {
        //配置阶段的任务就是执行各项目(project)下的build.gradle脚本
        //所有项目评估完成(配置阶段结束)
        println("all project evaluations completed (configuration complete)")
    }

    @Override
    void buildFinished(BuildResult result) {
        //构建结束
        println("build complete")
    }
})

gradle.getTaskGraph().addTaskExecutionGraphListener(new TaskExecutionGraphListener() {
    @Override
    void graphPopulated(TaskExecutionGraph graph) {
        println("current task:" + graph)
    }
})

//1）、首先，解析 settings.gradle 来获取模块信息，这是初始化阶段
//2）、然后，配置每个模块，配置的时候并不会执行 task
//3）、接着，配置完了以后，有一个重要的回调 project.afterEvaluate，它表示所有的模块都已经配置完了，可以准备执行 task 了
//4）、最后，执行指定的 task 及其依赖的 task


//long beginOfSetting = System.currentTimeMillis()
//def beginOfConfig
//def configHasBegin = false
//def beginOfProjectConfig = new HashMap()
//def beginOfProjectExecute
//gradle.projectsLoaded {
//    println 'init,time consuming:' + (System.currentTimeMillis() - beginOfSetting) + 'ms'
//}
//gradle.beforeProject { project ->
//    if (!configHasBegin) {
//        configHasBegin = true
//        beginOfConfig = System.currentTimeMillis()
//    }
//    beginOfProjectConfig.put(project, System.currentTimeMillis())
//}
//gradle.afterProject { project ->
//    def begin = beginOfProjectConfig.get(project)
//    println 'config,time consuming:' + project + 'time:' + (System.currentTimeMillis() - begin) + 'ms'
//}
//gradle.taskGraph.whenReady {
//    println 'config,time consuming total:' + (System.currentTimeMillis() - beginOfConfig) + 'ms'
//    beginOfProjectExecute = System.currentTimeMillis()
//}
//gradle.taskGraph.beforeTask { task ->
//    task.doFirst {
//        task.ext.beginOfTask = System.currentTimeMillis()
//    }
//    task.doLast {
//        println 'running,' + task + 'time:' + (System.currentTimeMillis() - task.beginOfTask) + 'ms'
//    }
//}
//gradle.buildFinished {
//    println('running,time consuming:' + (System.currentTimeMillis() - beginOfProjectExecute) + 'ms')
//}