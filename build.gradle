// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.4.20'

    repositories {
        jcenter()
        google()
        maven { url 'https://jitpack.io' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.1.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        //JCenter Push Plugin
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
    }
}

allprojects {
    repositories {
        jcenter()
        google()
        maven { url 'https://jitpack.io' }
    }

    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addStringOption('encoding', 'UTF-8')
    }
    tasks.withType(Javadoc).all {
        enabled = false
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

//统一管理项目的基本属性
ext {
    //android
    compileSdkVersion = 29
    buildToolsVersion = '29.0.3'
    minSdkVersion = 21
    targetSdkVersion = 29
    //test
    junit = '4.13.1'
    extRunner = '1.3.0'
    espressoCore = '3.3.0'
    //core
    appcompat = '1.2.0'
    constraintlayout = '2.0.4'
}

//关于gradle构建项目的理解和说明
//灵活性：gradle提供了一系列的 API 让我们有能力去修改或定制项目的构建过程
//细粒度：gradle构建的粒度细化到了每一个 task 之中，可以通过修改task去动态改变执行流程
//扩展性：gradle支持插件机制，所以我们可以复用这些插件，就如同复用库一样简单方便
//兼容性：兼容所有的 Maven、Ant 功能

//gradel的构建过程分为三部分：初始化、配置、执行
//初始化：解析整个工程中所有的Project，构建所有Project对应的project对象
//        读取跟工程中的setting.gradle中的include信息，确定有多少个工程加入构建
//        为每一个项目(build.gradle脚本文件)创建一个与之对应的Project实例
//        生成项目的层次结构
//        详情：setting.gradle文件
//配置：解析所有projects中的task，构建好所有task的拓扑图
//执行：执行具体的task以及其依赖task